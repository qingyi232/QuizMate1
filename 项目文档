# QuizMate – 全栈AI开发脚本（可直接丢给 Cursor 执行）v1.0

> 目标：用 **最低成本** 与 **全程 AI（Cursor/Claude/ChatGPT/Copilot）驱动**，在 1–2 周内完成 **QuizMate** 网页版 MVP：支持粘贴题目/上传文本 → AI 解析 → 自动生成 Flashcards → 保存/复习/订阅收费 → 一键 Vercel 上线。所有指令块均为可直接复制给 Cursor 的 Prompt。

---

## 0. 总览与非功能需求

* **定位**：面向东南亚/非洲学生的 AI 学习助手（Quiz/Flashcard + AI 解析）。
* **平台**：**Web 优先**（PC+移动自适应）。后续可平移小程序/App。
* **成本优先级**：免费/开源/便宜 → 方案可插拔，AI Provider 可切换。
* **合规**：不存储不必要的个人信息；未成年人友好；提供免责声明；敏感内容过滤。
* **可观测性**：日志、错误上报、关键指标埋点（留存、转化、单位成本）。
* **可扩展**：多语言、Stripe 订阅、题库导入、离线复习、轻社群裂变。

---

## 1. 技术栈与项目结构

**前端**：Next.js（App Router, TypeScript）+ Tailwind CSS + shadcn/ui + Radix UI + React Hook Form + Zod + Framer Motion（轻动画）

**后端**：Next.js Route Handlers（Serverless）+ Edge Runtime（流式/低延迟）+ Node Runtime（Stripe Webhook）

**数据库与鉴权**：Supabase（Postgres + Auth + Storage + RLS）

**缓存与限流**：Upstash Redis（免费层）或 Supabase 计数器兜底

**AI 接入**：可切换 Provider 封装层（默认：OpenAI **gpt-4o-mini**；备选：DeepSeek；国内备选：通义/文心）

**支付**：Stripe（订阅），LemonSqueezy 作为备选

**部署**：Vercel（前后端一体）

**分析**：PostHog（免费层）

**监控**：Sentry（可选，免费层）

**国际化**：next-intl（默认语言：en；附加：id（印尼语）、fil（菲律宾语）、sw（斯瓦西里语））

**项目结构（目标）**：

```
/ (repo root)
├─ app/
│  ├─ (marketing)/          # 落地页、FAQ、定价
│  ├─ (auth)/               # 登录注册/重置密码
│  ├─ dashboard/            # 用户主页、历史记录
│  ├─ quiz/                 # 创建/解析/结果
│  ├─ settings/             # 账号、语言、账单
│  ├─ api/
│  │  ├─ generate/route.ts  # AI 解析（Edge）
│  │  ├─ flashcards/route.ts
│  │  ├─ usage/route.ts     # 限流查询
│  │  ├─ stripe/route.ts    # 结算会话
│  │  └─ stripe-webhook/route.ts # Webhook（Node）
│  └─ layout.tsx, page.tsx
├─ components/
│  ├─ ui/*                  # shadcn 组件导出
│  ├─ cards/*               # Flashcard 组件
│  ├─ forms/*               # 表单
│  └─ charts/*              # 简单图表（学习统计）
├─ lib/
│  ├─ ai/*                  # Provider 抽象、Prompt、Schema
│  ├─ db/*                  # Supabase client, RLS helpers
│  ├─ auth/*                # Auth helpers
│  ├─ billing/*             # Stripe 封装
│  ├─ i18n/*                # 文案 & 语言配置
│  ├─ rate-limit/*          # Upstash/Supabase 限流
│  ├─ parsing/*             # 文本解析、清洗、题型检测
│  └─ utils/*               # 公共工具
├─ styles/*
├─ public/*
├─ tests/*                  # Vitest/Playwright 基础用例
├─ .env.example
└─ package.json
```

---

## 2. 环境变量（.env.example 模板）

```
# Supabase
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# OpenAI / 备选 DeepSeek / 备选 阿里通义
OPENAI_API_KEY=
AI_PROVIDER=openai   # 可选：openai | deepseek | qwen
DEEPSEEK_API_KEY=
QWEN_API_KEY=

# Upstash Redis（可选：限流与缓存）
UPSTASH_REDIS_REST_URL=
UPSTASH_REDIS_REST_TOKEN=

# Stripe（订阅）
STRIPE_SECRET_KEY=
STRIPE_PUBLISHABLE_KEY=
STRIPE_WEBHOOK_SECRET=
STRIPE_PRICE_ID_MONTHLY=
APP_BASE_URL=https://your-domain.com

# PostHog（分析）
NEXT_PUBLIC_POSTHOG_KEY=
NEXT_PUBLIC_POSTHOG_HOST=https://app.posthog.com

# Sentry（可选）
SENTRY_DSN=

# 安全与运营
MAX_FREE_REQUESTS_PER_DAY=5
MODEL_FREE=gpt-4o-mini
MODEL_PAID=gpt-4o-mini
AI_OUTPUT_LANGUAGE=en    # 默认输出语言，可改为用户选择
```

> **要求**：Cursor 在创建代码时，所有敏感变量必须从 `process.env` 读取，不得硬编码。

---

## 3. 数据库设计（Supabase Postgres）

> 要求：Cursor 生成 `sql`/`supabase` 初始化脚本与 RLS 策略，提供 `lib/db` 调用封装。

**核心表**

* `profiles`：扩展用户信息

  * `id (uuid pk, = auth.users.id)`
  * `email text` `display_name text` `plan text default 'free'`
  * `locale text default 'en'`
  * `created_at timestamp`

* `questions`

  * `id uuid pk` `user_id uuid fk` `source enum('paste','upload','import')`
  * `content text` `language text` `subject text` `grade text` `meta jsonb`
  * `hash text`（去重缓存键） `created_at timestamp`

* `answers`

  * `id uuid pk` `question_id uuid fk`
  * `answer text` `explanation text` `confidence numeric`
  * `model text` `tokens int` `cost_cents int` `lang text`
  * `created_at timestamp`

* `flashcards`

  * `id uuid pk` `question_id uuid fk`
  * `front text` `back text` `hint text` `tags text[]` `difficulty int`
  * `spaced_due_at timestamp` `created_at timestamp`

* `quizzes`

  * `id uuid pk` `user_id uuid fk` `title text` `meta jsonb` `created_at`

* `quiz_items`

  * `id uuid pk` `quiz_id uuid fk` `question_id uuid fk` `order int`

* `attempts`

  * `id uuid pk` `quiz_id uuid fk` `user_id uuid fk` `score numeric` `meta jsonb` `created_at`

* `usage_daily`

  * `id uuid pk` `user_id uuid` `date date` `count int`

* `subscriptions`

  * `user_id uuid pk` `status text` `stripe_customer_id text` `stripe_sub_id text` `current_period_end timestamp`

* `answer_cache`

  * `hash text pk` `normalized_prompt text` `answer jsonb` `created_at`

**RLS 策略简述**

* 每张与 `user_id` 相关的表：仅 `user_id = auth.uid()` 可读写。
* `answer_cache`：可读（为了命中缓存），不可写（仅服务器写）。用 PostgREST 或 Supabase Edge Function 由服务角色写入。

---

## 4. UI/UX 与页面说明（Tailwind + shadcn/ui）

> 要求：Cursor 生成所有页面与组件，移动优先，自适应，浅色主题。注意无障碍（ARIA）、键盘导航、聚焦态。

**公共组件**

* `Navbar`：Logo（QuizMate）、语言切换（en/id/fil/sw）、登录/注册按钮、Dashboard 入口
* `Footer`：版权、隐私、条款、联系
* `CTASection`：落地页复用的行动召唤
* `Flashcard`：可翻转、键盘快捷键（Left/Right 翻页、Space 翻面）
* `UsageBadge`：显示今日剩余次数

**页面**

1. `/` 落地页（(marketing)）

   * Hero：标题 **“QuizMate – Your AI Study Buddy”**
   * 副标题：**“Paste questions. Get instant explanations & flashcards.”**
   * 三个卖点卡片：低成本/多语言/离线复习
   * CTA 按钮：Start Free → `/quiz`
   * 价格区块：Free（5 次/天）vs Pro（\$2.99/mo）
   * FAQ：5–7 条

2. `/quiz` 创建解析

   * 文本域（最大 4000 字符）+ 语言选择（auto/en/id/fil/sw）+ 学科/年级可选
   * 上传 `.txt/.pdf`（首版仅文本与 PDF）
   * `Generate` 按钮（显示今日剩余次数），流式展示答案
   * 侧边栏显示自动生成的 Flashcards 列表，可一键保存到 `quizzes`

3. `/dashboard`

   * 最近问题/答案列表、快速复习入口
   * 简易学习统计（本周学习时长/卡片数/正确率）

4. `/settings`

   * Profile（昵称、语言）、Billing（订阅状态、升级/取消）、API 使用记录

5. `/auth/*`

   * 登录/注册/重置密码（Supabase Auth UI 自定义皮肤）

---

## 5. 解析方法与 AI Prompt 设计

> 目标：稳、便宜、可验证。先将用户输入规范化（清洗→检测题型→构造标准化 Prompt），要求 AI 输出 **结构化 JSON**，前端再渲染。

**题型支持（MVP）**

* 单选/多选（带选项 A/B/C/D）
* 简答/计算题（可能含 Latex）
* 判断题

**标准 JSON Schema（用 Zod 校验）**

```ts
AnswerSchema = z.object({
  language: z.string(),
  question_type: z.enum(['mcq','multi','short','true_false','unknown']),
  subject: z.string().optional(),
  answer: z.string(),                 // 最终答案（如选项字母或简答文本）
  explanation: z.string().min(10),    // 分步解释，尽量短
  confidence: z.number().min(0).max(1).optional(),
  flashcards: z.array(z.object({
    front: z.string(),
    back: z.string(),
    hint: z.string().optional(),
    tags: z.array(z.string()).optional(),
    difficulty: z.number().int().min(1).max(5).default(2)
  })).max(5)
})
```

**系统 Prompt（/lib/ai/prompts.ts）**

```
You are QuizMate, a concise AI tutor for students in emerging markets. 
Return answers in the target output language: {{target_lang}}.
Parsing rules:
- Detect question type (mcq/multi/short/true_false/unknown).
- If options exist, always return the chosen option letter(s) and the text.
- Keep explanations brief (<= 120 words) and step-by-step.
- Output MUST be valid JSON exactly matching the provided JSON schema. No extra text.
- If input is not a question, ask clarifying question in JSON (use question_type="unknown").
- Avoid harmful/medical/legal content; refuse politely if necessary.
```

**用户 Prompt 模板**

```
Input language: {{input_lang}}
Subject: {{subject}}
Grade: {{grade}}
Question text:
"""
{{cleaned_question_text}}
"""
JSON schema (example):
{ "language": "en", "question_type": "mcq", "answer": "B", "explanation": "...", "flashcards": [{"front":"...","back":"..."}] }
```

**解析/清洗**

* 去除 HTML、重复空白、页眉页脚
* PDF → 文本：使用 `pdf-parse`（后端）
* 选项提取：正则识别 `A.`, `B)`, `(C)` 等
* Latex 支持：前端用 `katex` 渲染（可选）

**多语言**

* 自动检测：简单基于 `franc` 或由模型判断
* 输出语言：尊重用户选择（默认 en），Prompt 指定 `{{target_lang}}`

**成本控制**

* 默认模型：`gpt-4o-mini`（便宜、足够好），温度 0.2；`max_tokens` 控制在 600–900
* 去重缓存：对 `normalized_prompt` 计算 SHA-256，命中 `answer_cache` 则直接返回
* 批量模式：超过 10 题时，拆分批次并合并结果（防止超长）

---

## 6. AI Provider 抽象与切换

> 要求：Cursor 实现统一接口 `AiClient`，支持 `openai|deepseek|qwen`，通过 `AI_PROVIDER` 环境变量切换。

**接口**

```ts
export interface AiClient {
  generateAnswer(input: {
    normalizedPrompt: string;
    targetLang: string;
    systemPrompt: string;
  }): Promise<AnswerSchemaType>
}
```

**OpenAI（默认）**

* 模型：`gpt-4o-mini`
* 流式：Server-Sent Events 可选（MVP 可直接一次性返回 JSON）
* Moderation：调用 `omni-moderation-latest`（或相当替代）

**DeepSeek（备选）**

* 模型：`deepseek-chat` 或等价便宜模型

**Qwen/通义（国内备选）**

* 仅在国内线路不可访问 OpenAI 时使用

---

## 7. 限流、计费与订阅

**免费配额**

* 环境变量 `MAX_FREE_REQUESTS_PER_DAY=5`
* 实现：

  * 请求前查询 `usage_daily`（用户+当天）计数
  * 若命中 `answer_cache`，不计数
  * 生成成功后 +1

**订阅**

* `/api/stripe` 创建结算会话（月付 \$2.99）
* Webhook 更新 `subscriptions` 表：`active|past_due|canceled` 等
* 中间件：若 `plan=free` 且超额 → 返回 402，引导升级

**成本监控**

* `answers.cost_cents` 字段填入估算成本（token \* 单价），用于仪表盘
* 日志中打印每次调用 tokens/费用（便于优化）

---

## 8. 题库与导入（MVP 方案）

**来源**

* 用户自有题目（粘贴/上传）— 作为主路径
* 开源教材/题库（仅使用可合法复用的内容）：

  * OpenStax（开放许可教材，英语）
  * Kaggle 开放教育数据集（请注明来源）

**导入形式**

* CSV/JSON 批量导入（后台页面，仅管理员）

  * CSV 列：`question, options(optional CSV), answer(optional), subject, grade, lang`
* 每条导入后即走同样的 AI 解析 pipeline（生成标准 JSON + Flashcards）

**版权与合规**

* 只导入 **许可明确** 的内容；禁止抓取受版权保护的商业题库
* 为所有导入记录保存 `import_source` 元信息

---

## 9. 文件上传与解析

**支持**：`.txt`、`.pdf`（首版）

* `.pdf` → `pdf-parse` 提取文本；若失败给出友好错误
* 大文件限制：10MB；超限提示分批上传
* 未来扩展（可选）：图片 OCR → Tesseract.js（本地）、或 AI 视觉模型

---

## 10. 前后端 API 合约

**POST /api/generate**

* Req: `{ text: string, meta?: {subject?:string, grade?:string, lang?:'auto'|'en'|'id'|'fil'|'sw'} }`
* Res: `{ ok: true, data: AnswerSchemaType, fromCache?: boolean }`
* 错误：`{ ok:false, code:'LIMIT'|'MODERATION'|'INVALID'|'SERVER', message }`

**POST /api/flashcards**

* 保存/更新 Flashcards，绑定 question\_id

**GET /api/usage**

* 返回今日已用次数、剩余次数

**POST /api/stripe**

* 创建订阅会话，返回支付 URL

**POST /api/stripe-webhook**

* 处理订阅状态更新（Node Runtime）

---

## 11. 成本优化策略（必须实现）

1. **Prompt 归一化 & 缓存**：

   * 统一清洗 → hash → 命中 `answer_cache` 直接返回
2. **截断**：

   * 输入超过 1500 字符时，提示用户分段或自动概括后解析
3. **模型选择**：

   * 免费用户：`MODEL_FREE`
   * 付费用户：`MODEL_PAID`（同为 mini 也可，但设置更高 token 上限）
4. **合批**：

   * 多题目解析支持批量，但每次调用 <= 3 题，避免上下文过长
5. **失败重试**：

   * JSON 解析失败时，自动重试 1 次，提示 “Fix JSON to schema”

---

## 12. 安全、隐私与内容安全

* 使用 OpenAI/Provider 的 **内容审核** 接口，拦截辱骂、成人、仇恨、医疗、法律建议等
* 免责声明与“仅教育用途”提示
* 不保存明文邮箱以外的敏感信息；允许用户删除数据（GDPR 友好）
* Supabase RLS 全面开启，服务端写入使用 Service Role
* API 速率限制（IP + 用户纬度）

---

## 13. 国际化（i18n）

* `next-intl`：默认 `en`，附加 `id`、`fil`、`sw`
* 关键文案文件：`/lib/i18n/en.json` 等
* AI 输出语言跟随用户设置 `AI_OUTPUT_LANGUAGE` 或页面下拉选择

---

## 14. 分析与日志

* PostHog：埋点 `generate_start/finish`、`from_cache`、`limit_hit`、`subscribe_click/success`
* Sentry：捕获 API 路由异常与 JSON 解析错误
* Vercel 日志：记录 token/费用摘要（注意不含 PII）

---

## 15. 测试与验收

**单元**

* `lib/parsing` 的题型检测与选项抽取
* `lib/ai/validate` 的 Zod 校验

**端到端（Playwright）**

* 登录 → 粘贴题目 → 生成 → 卡片可翻转 → 保存
* 超配额提示 → 升级 → 模拟 webhook → 无限制

**验收标准（MVP）**

* 1 小时内可从零部署到 Vercel，可正常注册/登录/生成/保存
* 免费配额生效；缓存命中率可见；订阅可开通

---

## 16. 部署步骤（Vercel）

1. GitHub 新仓库 → 推送代码
2. Vercel import → 选择项目 → 设置环境变量（见 `.env.example`）
3. 选择区域：`iad`/`sin` 皆可（靠近东南亚）
4. 自定义域名绑定（`quizmate.ai` 或 `quizmate.app`）
5. 配置 `stripe-webhook` 路由为 Node Runtime（`export const runtime = 'nodejs'`）

---

## 17. Cursor 逐步执行指令块（复制即用）

### 指令 1：初始化 & 基础依赖

```
请在当前目录初始化 Next.js + TypeScript + App Router 项目，安装并配置：
- tailwindcss, @radix-ui/react-icons, class-variance-authority, clsx, tailwind-merge
- shadcn/ui 并生成 Button, Card, Input, Textarea, Dialog, Tabs, Badge 等组件
- react-hook-form, zod, @hookform/resolvers
- @supabase/supabase-js
- pdf-parse
- @upstash/redis
- posthog-js
- stripe, @stripe/stripe-js
- next-intl
- （可选）sentry/nextjs, framer-motion, katex
并创建 `.env.example`（内容见上文），并在 `README.md` 写启动命令与环境变量说明。
```

### 指令 2：全局样式与主题

```
创建全局 Tailwind 样式，设置基础色为蓝/绿系。实现 Navbar、Footer、CTASection 组件。首页 `/` 使用 (marketing) 路由组，包含 Hero、卖点、定价、FAQ、页脚。移动端优先，自适应。
```

### 指令 3：Supabase 初始化与 RLS

```
编写 `lib/db/supabase-server.ts` 与 `lib/db/supabase-browser.ts`。创建 SQL 脚本：表结构、索引与 RLS 策略（见“数据库设计”）。提供 npm 脚本一键执行迁移。实现 profiles 自动插入触发器。
```

### 指令 4：Auth & 中间件

```
集成 Supabase Auth（邮箱+Google 登录）。未登录访问 `/quiz`、`/dashboard` 重定向到登录页。创建 `/auth` 相关页面并使用 shadcn/ui 美化。
```

### 指令 5：解析管线与缓存

```
实现 `lib/parsing`：
- `normalize(text)` 清洗文本
- `detectQuestionType(text)` 返回 mcq/multi/short/true_false
- `extractOptions(text)` 返回 {A,B,C,D}
- `hashPrompt(text+meta)` 返回 sha256
创建 `lib/ai/schema.ts`（Zod）与 `lib/ai/prompts.ts`（系统+用户模板）。
实现 `lib/ai/providers/{openai,deepseek,qwen}.ts` 与 `lib/ai/index.ts`（工厂）。
实现 `lib/cache/index.ts`：Upstash Redis 为主，Supabase answer_cache 为备；优先读缓存。
```

### 指令 6：`/api/generate`（Edge）

```
创建 `app/api/generate/route.ts`（Edge Runtime）：
- 校验登录与额度；查询/更新 `usage_daily`
- 归一化文本→hash→查 `answer_cache`
- 若命中返回缓存；否则调用 AI Provider 获取 JSON
- Zod 校验；写入 questions/answers/flashcards；更新缓存
- 返回 `{ok:true,data,fromCache}`
失败时返回 `{ok:false,code,message}` 并打点 PostHog/Sentry。
```

### 指令 7：`/quiz` 页面

```
构建输入表单（Textarea + 文件上传 .txt/.pdf），语言/学科/年级选择。点击 Generate 调用 `/api/generate`。结果区渲染：答案、简短解析、Flashcards 列表。支持一键保存到某个 Quiz。加入 UsageBadge 与升级入口。
```

### 指令 8：Dashboard、Settings、Billing

```
- `/dashboard`：展示最近问题与卡片，复习入口
- `/settings`：资料、语言、订阅状态；Stripe 订阅按钮
- `/api/stripe`：创建结算会话；`/api/stripe-webhook`：更新 subscriptions
- 订阅中间件：免费超额时弹框提示与跳转支付
```

### 指令 9：国际化与本地化

```
集成 next-intl，提供 en/id/fil/sw 四套文案文件。语言切换组件放 Navbar。AI 输出语言跟随当前语言设置。
```

### 指令 10：分析与监控

```
集成 PostHog（key/host 来自 env），埋点 generate_start/finish/from_cache/limit_hit/subscribe_*。集成 Sentry（可选），捕获 API 错误。
```

### 指令 11：测试与部署

```
添加基本单元测试（Vitest）与一条 Playwright e2e 测试：登录→粘贴样例题→生成→看到卡片。生成 Vercel 部署配置（默认 Edge；Stripe Webhook 使用 Node）。输出部署步骤与 README 更新。
```

---

## 18. 示例题与验收用例

**样例 1（MCQ）**

```
Q: Which gas is most responsible for the greenhouse effect?
A) Oxygen  B) Nitrogen  C) Carbon dioxide  D) Argon
```

**期望**：`answer: "C"`，解释≤120词，生成 3 张 flashcards

**样例 2（简答/数学）**

```
Solve: 2x + 5 = 17. Show steps.
```

**期望**：`answer: "x=6"`，分步解释，生成 2–3 张卡片；若含 KaTeX 以 `$...$` 包裹

---

## 19. 法务与政策（前端页脚链接）

* Terms of Use：教育用途，不保证答案完全正确；用户对使用结果负责
* Privacy Policy：最小化数据收集；支持删除账户与数据导出
* Content Policy：禁止医疗/法律咨询；对不当内容进行拦截

---

## 20. 路线图（MVP → v1.0 → v2.0）

### 阶段一：MVP（1-2周）

* ✅ 完成首页 + Quiz 输入/输出
* ✅ 接入 OpenAI GPT-4o-mini（或 DeepSeek 替代）
* ✅ Flashcards 组件（翻转式卡片）
* ✅ Supabase 数据库存储
* ✅ 免费用户限制（每天 5 次）
* ✅ 部署到 Vercel，绑定 quizmate.app 域名

### 阶段二：v1.0（1-2月）

* 🔹 用户系统完善（邮箱/Google 登录）
* 🔹 Stripe 订阅上线（\$2.99/月）
* 🔹 本地化（英语+印尼语+菲律宾语）
* 🔹 题库导入功能（CSV/PDF 上传）
* 🔹 缓存优化（Upstash Redis）
* 🔹 基础埋点（PostHog：注册率/留存率/付费转化率）

### 阶段三：v2.0（3-6月）

* 🔸 AI 辅导模式：分步解题、提示式学习
* 🔸 协作模式：小组共享题库 & Flashcards
* 🔸 移动端适配（PWA / React Native App）
* 🔸 多语言扩展（斯瓦西里语、法语，用于非洲市场）
* 🔸 学习路径推荐（根据用户错题生成计划）
* 🔸 社区功能（用户可分享题库 / Flashcards）
* 🔸 AI 出题：根据学习目标自动生成模拟测试

---

## 21. 成本预算（极低成本起步）

* **域名**：\$10-20/年（推荐 quizmate.app 或 quizmate.ai）
* **Vercel 托管**：免费层够用
* **数据库（Supabase）**：免费层 500MB → 后续 \$25/月
* **Redis（Upstash）**：免费层 10K 请求 → 后续 \$10/月
* **AI 调用**：

  * GPT-4o-mini → \$0.15/1M tokens（极低）
  * 预计初期成本 <\$5/月
* **支付（Stripe）**：无月租，3-5% 抽成

👉 初期总成本 ≈ \$20（一次性）+ \$5/月（可控）

---

## 22. 增长策略（东南亚 & 非洲市场）

1. **学生群体切入**

   * Facebook 学生群组（菲律宾、印尼、尼日利亚）
   * Reddit 教育板块（r/learnenglish, r/college, r/IELTS）
   * WhatsApp/Telegram 学习群（当地最常见）

2. **增长黑客**

   * 免费额度 + 邀请制奖励（邀请 1 人 → 多 5 次免费使用）
   * 免费 PDF 上传解析（吸引大量学生先试用）
   * 在 Quiz 结果页插入分享按钮（推特/Telegram 一键分享）

3. **SEO 策略**

   * 在 /blog 发布英文学习文章（由 AI 生成）
   * 关键词覆盖 “free quiz answers online”、“AI flashcards generator”
   * 专注长尾词（非洲/东南亚竞争低）

---

## 23. 长期潜力

* 🔮 **学习社交化** → 打造「学生版 Duolingo + Quizlet」
* 🔮 **AI 导师系统** → 类似私人家教，分层收费（\$2.99 基础 / \$9.99 高级）
* 🔮 **本地合作** → 与东南亚/非洲补习班、学校合作，做 SaaS 版本
* 🔮 **广告盈利** → 免费用户可接受的轻量广告（教育类）

---

✅ 至此，QuizMate 的端到端全栈开发方案（从技术 → 部署 → 成本 → 增长 → 路线图）完整。你只需按顺序把脚本丢给 Cursor，它就能帮你快速产出可上线的 MVP。

